#+TITLE: Emacs Config
#+STARTUP: overview
:PROPERTIES:
:ID:       2b04f9c4-056e-4885-8bbf-18890db97b87
:END:

* Basic Adjustments
:PROPERTIES:
:ID:       893fa650-5c1d-4b03-b3b0-5220bae56043
:END:
** Basic UI
:PROPERTIES:
:ID:       0224cbdd-9cf9-47a6-ba6e-bcfecbc9a234
:END:
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :height 140)  ;; Magnify text here
  (setq inhibit-startup-message t)
  (setq visible-bell t)
  (setq scroll-conservatively 100)
  ;; (setq-default cursor-type `bar)
  ;; (set-cursor-color "#a5fbff")
  (blink-cursor-mode 1)
  (when window-system (global-hl-line-mode t))
  ;; (global-prettify-symbols-mode t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  ;; Allow Emacs to access content from clipboard.
  (setq x-select-enable-clipboard t
        x-select-enable-primary t)
#+END_SRC
** Autosave and backups
*** Custom dir
:PROPERTIES:
:ID:       391cefa3-e4c2-407b-bcc3-33883a52d664
:END:
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `((".*" . "~/emacs-backups/")))
  (setq auto-save-file-name-transforms
        `((".*" "~/emacs-backups/" t)))
#+END_SRC
*** Delete old files
:PROPERTIES:
:ID:       300373a1-0b3b-4e08-be8b-4c2d8de64411
:END:
- Delete old backups not accessed for a week (from emacs wiki: https://www.emacswiki.org/emacs/BackupDirectory#toc2)
#+BEGIN_SRC emacs-lisp
  (message "Deleting old backup files...")
  (let ((week (* 60 60 24 7))
        (current (float-time (current-time))))
    (dolist (file (directory-files temporary-file-directory t))
      (when (and (backup-file-name-p file)
                 (> (- current (float-time (fifth (file-attributes file))))
                    week))
        (message "%s" file)
        (delete-file file))))
#+END_SRC
* Base Font and faces
* Themes
:PROPERTIES:
:ID:       0f66277e-5f9f-48b6-b90d-0c02805b8446
:END:

Cyberpunk
#+begin_src emacs-lisp
   (with-eval-after-load "cyberpunk-theme"
     (custom-theme-set-faces
      'cyberpunk
      '(org-level-2 ((t (:inherit bold :foreground "SeaGreen2"))))))
#+end_src

Modus-Vivendi
#+begin_src emacs-lisp
  (use-package modus-themes
    :ensure
    :init
    ;; Add all your customizations prior to loading the themes
    (setq modus-themes-slanted-constructs t
          modus-themes-bold-constructs nil
          modus-themes-region 'no-extend)

    ;; Load the theme files before enabling a theme
    (modus-themes-load-themes)
    :config
    ;; Load the theme of your choice:
    (modus-themes-load-vivendi) ;; OR (modus-themes-load-operandi)
    :bind ("<f5>" . modus-themes-toggle))
#+end_src

#+begin_src emacs-lisp
  ;; (with-eval-after-load "modus-vivendi-theme"
  ;;   (custom-theme-set-faces
  ;;    'modus-vivendi
  ;;    '(bold ((t (:foreground Plum1 :weight bold))))
  ;;    '(org-level-1 ((t (:inherit bold :foreground LightSkyBlue1 :height 1.3))))
  ;;    '(org-level-2 ((t nil)))
  ;;    ))		
                                          ;
#+end_src

* Tasks
:PROPERTIES:
:ID:       a52d68e1-3446-4169-8f76-3dcbc79d30a7
:END:
#+begin_src emacs-lisp
  (with-eval-after-load ""
    (custom-theme-set-faces
     'cyberpunk
     '(org-level-2 ((t (:extend nil :foreground "SeaGreen1"))))))

#+end_src
* Modeline
:PROPERTIES:
:ID:       5099a7e6-066f-41ac-a992-60fe2eb0ccea
:END:
#+begin_src emacs-lisp
  (setq column-number-mode t)
#+end_src
* File shortcuts & bookmarks
- Shortcuts to open common files in new frames to enable control with i3.
** Files
:PROPERTIES:
:ID:       1d3b5412-b5e0-4230-bbb8-c454d1a3bf79
:END:
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c f c")
                  (lambda () (interactive) (find-file-other-frame "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c f i")
                  (lambda () (interactive) (find-file-other-frame "~/org/inbox.org")))
  (global-set-key (kbd "C-c f m")
                  (lambda () (interactive) (find-file-other-frame "~/org/media-lists.org")))
  (global-set-key (kbd "C-c f p")
                  (lambda () (interactive) (find-file-other-frame "~/org/self.org")))
  (global-set-key (kbd "C-c f l")
                  (lambda () (interactive) (find-file-other-frame "~/org/learn.org")))
  (global-set-key (kbd "C-c f w")
                  (lambda () (interactive) (find-file-other-frame "~/org/work.org")))

#+end_src
** Bookmarks
:PROPERTIES:
:ID:       ce34b1bf-6208-4aab-83e3-3834e9d9e757
:END:
#+begin_src emacs-lisp
  (global-set-key (kbd "<f1>") '(lambda () (interactive) (bookmark-set "SAVED")))
  (global-set-key (kbd "<f2>") '(lambda () (interactive) (bookmark-jump "SAVED")))
#+end_src
* Magit
:PROPERTIES:
:ID:       8e7a10d2-8304-45eb-97bf-aaee40c46c2d
:END:
#+begin_src emacs-lisp
  ;; (use-package magit
  ;;   :ensure t)
#+end_src
* Org
- [[https://orgmode.org/org.html][Org Manual]]
** Setup (ellispsis, emphasis, indent, etc)
:PROPERTIES:
:ID:       351d9037-f52d-4954-82b7-e7ad4c8ae8fd
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    (setq org-startup-indented t
          org-ellipsis " Â»"
          org-hide-emphasis-markers t
          org-startup-with-inline-images t
          org-startup-with-latex-preview t
          ;; org-pretty-entities t
          org-startup-folded t
          org-archive-location "~/org/archives/%s_archive::"

          )
    :hook
    (org-mode-hook  . visual-line-mode))
    ;; (org-mode . olivetti-mode))
#+END_SRC
** Global Org keys
:PROPERTIES:
:ID:       1b7b7d27-43c8-44e2-8679-67e8af4e153f
:END:
- Recommended global commands (org manual)
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c l") `org-store-link)
  (global-set-key (kbd "C-c a") `org-agenda)
  (global-set-key (kbd "C-c c") `org-capture)
#+end_src
** Extend day untill 2am
:PROPERTIES:
:ID:       9ba5c3d5-9af9-4c12-a481-0ee51158c634
:END:
#+begin_src emacs-lisp
  (setq org-extend-today-until 2)
#+end_src
** Export & Publishing
*** Export
:PROPERTIES:
:ID:       1b270d93-fc3b-4026-88b5-c33d979f9cfa
:END:
#+begin_src emacs-lisp
  (require 'ox-html)
  (use-package htmlize
    :ensure t
    :config
    (setq org-html-htmlize-output-type 'css))
  (setq org-export-with-section-numbers nil
        org-export-with-toc nil
        org-export-with-tags nil
        )
#+end_src
*** Publish
:PROPERTIES:
:ID:       a9b43374-75bd-41fd-bce0-4a7978c4ec6d
:END:
#+begin_src emacs-lisp
  (require 'ox-publish)
  ;; (require 'ox-html)
  (setq org-publish-project-alist
        '(
          ("ajpkim-org-posts"
           :base-directory "~/org/ajpkim-site/org/"
           :base-extension "org"
           :publishing-directory "~/ajpkim.github.io/"
           :recursive t
           :publishing-function org-html-publish-to-html
           :html-extension "html"
           :body-only t ;; Only export section between <body> </body>
           :with-toc nil
           )
          ("ajpkim-html-posts"
           :base-directory "~/org/ajpkim-site/org/"
           :base-extension "html"
           :publishing-directory "~/ajpkim.github.io"
           :recursive t
           :publishing-function org-publish-attachment
           )
          ("ajpkim-assets"
           :base-directory "~/org/ajpkim-site/assets/"
           :base-extension "css\\|scss\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3"
           :publishing-directory "~/ajpkim.github.io/assets/"
           :recursive t
           :publishing-function org-publish-attachment
           )
          ("ajpkim" :components ("ajpkim-org-posts" "ajpkim-html-posts" "ajpkim-assets"))
          ))
#+end_src
** Agenda
*** Agenda files
:PROPERTIES:
:ID:       b7a25464-eb55-49e0-bbbb-242adaba58ef
:END:
- Doing manually now with =C-c [= and =C-c ]=.
- Another solution with recursive file search:
  - =(setq org-agenda-files (directory-files-recursively "~/org/" "\\.org$"))=
- Can also create a file with a /list/ of files to read and then can append and remove from this list easily (I believe).
#+begin_src emacs-lisp
  ;; (setq org-agenda-files '("~/org/"))
#+end_src
*** Base settings
:PROPERTIES:
:ID:       8b484d69-0fdc-46ee-a7dc-bd8b14e01e29
:END:
:LOGBOOK:
- State "TODO"       from              [2021-01-29 Fri 22:59]
:END:
#+begin_src emacs-lisp
  (setq org-agenda-span 5 ;; Number of days to show in agenda
        org-agenda-start-on-weekday nil  ;; Start from current day
        org-agenda-skip-deadline-if-done t  ;; Declutter the agenda
        org-agenda-skip-scheduled-if-done t
        org-agenda-window-setup 'current-window
        )
#+end_src
*** Agenda global TODO list decluttering
:PROPERTIES:
:ID:       b66d5f7f-1316-4d29-ac4a-410b78634969
:END:
- Turned off.
#+begin_src emacs-lisp
  (setq org-agenda-todo-ignore-deadlines nil
        org-agenda-todo-ignore-scheduled nil)
#+end_src
*** TODO Custom agenda views
:PROPERTIES:
:ID:       927cbd70-34fa-4c81-9a32-bf8a72a9af5e
:END:

First attempt at custom commands...
#+begin_src emacs-lisp
  ;; (setq org-agenda-custom-commands
  ;;       '(("n" "Simple agenda/tasks view"
  ;;          ((agenda "")
  ;;           (alltodo "")))
  ;;         ("x" "NEXT and STARTED tasks"
  ;;          ((todo "STARTED")
  ;;           (todo "NEXT")))
  ;;         ("d" "Archiving" todo "DONE|PASS")
  ;;         ("w" "Writing inbox"
  ;;          ((tags "wi")))
  ;;         ("W" "Weekend"
  ;;          ((tags "weekend")))
  ;;         ("r" "Review items"
  ;;          ((tags "review")))
  ;;         ))
#+end_src
** TODOs
:PROPERTIES:
:ID:       b97b0215-7ab5-4d7e-ae0a-330b9ad3730e
:END:
- The "!" triggers autologging (into the LOGBOOK). Not using anymore because of new archive workflow.
#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "ACTIVE(a)" "HOLD(h)" "SOMEDAY(s)" "PROJECT(P)" "|" "DONE(d)" "PASS(p)")))

  (setq org-todo-keyword-faces
        '(
          ("TODO" . (:foreground "#ffff66" :weight bold))
          ("ACTIVE" . (:foreground "#44ddff" :weight bold))
          ("HOLD" . (:foreground "#dfaa8e" :weight bold))
          ("SOMEDAY" . (:foreground "#00ffff" :weight bold))
          ("PROJECT" . (:foreground "#ffbbff" :weight bold))
          ("DONE" . (:foreground "#19ffaf" :weight bold))
          ("PASS" . (:foreground "#ff3d40" :weight bold))))

  ;; (setq org-log-done 'time)  ;; Don't need with all other logging in LOGBOOK
  (setq org-log-into-drawer "LOGBOOK")

  ;; Don't set timestamp or note when shifting through TODO states.
  ;; (setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+end_src
** Capture
:PROPERTIES:
:ID:       3d4c732d-b5aa-466c-b68e-a832f85d27a5
:END:

#+begin_src emacs-lisp
  (setq org-capture-templates
        '(("a" "Anki")
          ("aa" "Anki basic"
           entry
           (file+headline org-my-anki-file "Dispatch Shelf")
           "* %U %^g \n:PROPERTIES:\n:ANKI_NOTE_TYPE: Basic\n:ANKI_DECK: main\n:ANKI_TAGS:\n:END:\n** Front\n%?\n** Back\n\n")
          ("ac" "Anki cloze"
           entry
           (file+headline org-my-anki-file "Dispatch Shelf")
           "* %U  %^g \n:PROPERTIES:\n:ANKI_NOTE_TYPE: Cloze\n:ANKI_DECK: main\n:ANKI_TAGS:\n:END:\n** Text\n%?\n** Extra\n\n")
          ("at" "Anki Type"
           entry
           (file+headline org-my-anki-file "Dispatch Shelf")
           "* %U  %^g\n:PROPERTIES:\n:ANKI_NOTE_TYPE: Type\n:ANKI_DECK: main\n:ANKI_TAGS:\n:END:\n** Front\n%?\n** Back\n\n")
          ("c" "Add a task" entry (file "~/org/inbox.org")
           "* TODO %?\n:PROPERTIES:\n:ID: %(shell-command-to-string \"uuidgen\"):CREATED: %U\n:END:\n"
           :prepend t
           )
          ("d" "Dream journal" plain (file+olp+datetree "~/org/dreams.org")
           "%?"
           :tree-type 'daily)
          ("f" ">5m" entry (file "~/org/inbox.org")
           "* TODO %^     :5m:\n:PROPERTIES:\n:ID: %(shell-command-to-string \"uuidgen\"):CREATED: %U\n:END:\n%?"
           :prepend t)
          ))
#+end_src

** Refile
:PROPERTIES:
:ID:       745d204e-d319-46c4-b67f-d63996bc9044
:END:
- Look in current file and all agenda files for refile menu.
#+begin_src emacs-lisp
  (setq org-refile-targets '((org-agenda-files :todo . "PROJECT")))
#+end_src
** Tags
:PROPERTIES:
:ID:       9b259c2f-ff29-49b6-9af1-1bdc801a7c3b
:END:
- Can use =C-c C-c= and single key selection (in expert mode) to add tags quickly.
#+begin_src emacs-lisp
  (setq org-tag-alist
        '(
          ("anki" . ?a)
          ("linux" . ?l)
          ("ML" . ?m)
          ("note" . ?n)
          ("paper" . ?p)
          ("read" . ?r)
          ("recur" . ?R)
          ("5m" . ?f)
          ))
  (setq org-fast-tag-selection-single-key (quote expert))
#+end_src
** Babel
:PROPERTIES:
:ID:       a16c5ff0-8587-4356-9443-857710394623
:END:
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (haskell    . t)
     (python     .t)
     (sql        .t)
     (latex      . t)
     (js         . t)
     (shell      . t)
     ))
#+end_src
** Org-roam
:PROPERTIES:
:ID:       9e24b8ee-1291-4c3c-a09e-b3870bf8dd9e
:END:
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :config
    (setq org-roam-directory "~/org/notes/"
          ;; Capture tags via #+roam_tags and normal org tags ("vanilla")
          org-roam-tag-sources '(prop vanilla)
          org-roam-prefer-id-links t
          org-roam-completion-system 'ivy
          )
    (set-face-attribute 'org-roam-link nil
                        :foreground "light green"
                        :weight 'bold)
    :hook
    (after-init . org-roam-mode)
    :bind (:map org-roam-mode-map
                (("C-c n l" . org-roam)
                 ("C-c n f" . org-roam-find-file)
                 ("C-c n c" . org-roam-capture)
                 ("C-c n g" . org-roam-show-graph)
                 ("C-c n b" . org-roam-switch-to-buffer))
                ;; :map org-mode-map
                ("C-c n i" . org-roam-insert)
                ))

  (setq org-roam-capture-templates
        '(("r" "default" plain (function org-roam--capture-get-point)
           :file-name "%<%Y%m%d%H%M%S>-${slug}"
           :head "#+TITLE: ${title}\n#+ROAM_TAGS: %?\n"
           :unnarrowed t
           :immediate_finish t)
          ))

  (defun ak/org-roam--title-to-slug (title)
    ;; Change to dashes instead of default underscores. Taken from org-roam source code.
    "Convert TITLE to a filename-suitable slug."
    (cl-flet* ((nonspacing-mark-p (char)
                                  (eq 'Mn (get-char-code-property char 'general-category)))
               (strip-nonspacing-marks (s)
                                       (apply #'string (seq-remove #'nonspacing-mark-p
                                                                   (ucs-normalize-NFD-string s))))
               (cl-replace (title pair)
                           (replace-regexp-in-string (car pair) (cdr pair) title)))
      (let* ((pairs `(("[^[:alnum:][:digit:]]" . "-")  ;; convert anything not alphanumeric
                      ("__*" . "-")  ;; remove sequential underscores
                      ("^_" . "")  ;; remove starting underscore
                      ("_$" . "")))  ;; remove ending underscore
             (slug (-reduce-from #'cl-replace (strip-nonspacing-marks title) pairs)))
        (downcase slug))))

  (setq org-roam-title-to-slug-function 'ak/org-roam--title-to-slug)
#+end_src
** Org-journal
:PROPERTIES:
:ID:       2ea65a55-a166-4676-abe1-0479341dc138
:END:
#+begin_src emacs-lisp
  (use-package org-journal
    :ensure t
    :defer t
    :init
    ;; ;; Change default prefix key; needs to be set before loading org-journal
    (setq org-journal-prefix-key "")  ;; disable default key-bindings: https://github.com/bastibe/org-journal/pull/278#issuecomment-664986601
    :config
    (setq org-journal-dir "~/org/journal/"
          org-journal-date-format "%a, %Y-%m-%d"
          org-journal-date-prefix "#+TITLE: "  ;; this string prefixes the data at the top of journal file
          org-journal-time-prefix "* "  ;; Entries are 1st level headers
          org-journal-file-format "%Y-%m-%d.org"
          org-journal-file-type 'daily
          org-journal-carryover-items ""  ;; Default behavior is to carryover TODOs.
          org-journal-enable-agenda-integration t  ;; Add current and future journal entries to agenda
          )
    :bind (("C-c j" . org-journal-new-entry)
           ))

  ;; DOESN'T WORK...
  (defcustom org-journal-find-file 'find-file
    "The function to use when opening an entry.

  Set this to `find-file' if you don't want org-journal to split your window."
    :type 'function)

  (defun org-journal-find-location ()
    ;; Open today's journal, but specify a non-nil prefix argument in order to
    ;; inhibit inserting the heading; org-capture will insert the heading.
    ;; Used for org-capture templates.
    (org-journal-new-entry t)
    (unless (eq org-journal-file-type 'daily)
      (org-narrow-to-subtree))
    (goto-char (point-max)))

  ;; (defun ak/org-journal-save-entry-and-exit()
  ;;   "Simple convenience function.
  ;;   Saves the buffer of the current day's entry and kills the window
  ;;   Similar to org-capture like behavior"
  ;;   (interactive)
  ;;   (save-buffer)
  ;;   (kill-buffer-and-window))
  ;; (define-key org-journal-mode-map (kbd "C-x C-s") 'ak/org-journal-save-entry-and-exit)
#+end_src
** Org-drill
:PROPERTIES:
:ID:       95cfeb90-0814-489d-9dad-14e86eb9760f
:END:
#+begin_src emacs-lisp
  (use-package org-drill
    :ensure t)
#+end_src
** toc-org
:PROPERTIES:
:ID:       f66f207e-fabe-46de-8584-c1d6294641b3
:END:
#+begin_src emacs-lisp
  (use-package toc-org
    :ensure t
    :config
    (setq toc-org-max-depth 3
          toc-org-hrefify-default "org"  ;; Options are org or gh (github)
          )
    )

#+end_src
** Org-id
:PROPERTIES:
:ID:       5b3d9ed6-ea18-4746-8477-7f1fbb6f33b5
:END:
- Generate IDs for linking purposes when execute 'C-c l'
#+begin_src emacs-lisp
  (setq org-id-link-to-org-use-id t  ;; May want to set to "if-interactive"
        )
#+end_src
- Testing : [[https://writequit.org/articles/emacs-org-mode-generate-ids.html#automating-id-creation][SO]]
#+begin_src emacs-lisp
  (defun ak/org-uuid-custom-id-get (&optional pom create prefix)
    "Get the CUSTOM_ID property of the entry at point-or-marker POM.
     If POM is nil, refer to the entry at point. If the entry does
     not have an CUSTOM_ID, the function returns nil. However, when
     CREATE is non nil, create a CUSTOM_ID if none is present
     already. PREFIX will be passed through to `org-id-new'. In any
     case, the CUSTOM_ID of the entry is returned."
    (interactive)
    (org-with-point-at pom
      (let ((id (org-entry-get nil "CUSTOM_ID")))
        (cond
         ((and id (stringp id) (string-match "\\S-" id))
          id)
         (create
          ;; (setq id (org-id-new (concat prefix "h")))
          (setq id (org-id-new))
          (org-entry-put pom "CUSTOM_ID" id)
          (org-id-add-location id (buffer-file-name (buffer-base-buffer)))
          id)))))

  (defun ak/org-add-uuid-custom-ids-to-headlines-in-file ()
    "Add CUSTOM_ID properties to all headlines in the
     current file which do not already have one."
    (interactive)
    (org-map-entries (lambda () (ak/org-uuid-cstom-id-get (point) 'create))))

#+end_src
- Another option with CUSTOM_IDs that are based on headers (want this for blog exports)
- IMPROVE THE regexp replace to make better urls
#+begin_src emacs-lisp
  (defun ak/org-publish-add-header-text-custom-ids ()
    "Add CUSTOM_ID property to each header in current buffer that is based on header text."
    (interactive)
    (let (id-list)
      (cl-labels ((get-id ()
                          (let ((id (url-encode-url
                                     (replace-regexp-in-string
                                      " " "-"
                                      (org-get-heading t t t t))))
                                (dup-counter 1))
                            (while (member id id-list)
                              (setq id (format "%s-%d" id dup-counter))
                              (cl-incf dup-counter))
                            (push id id-list)
                            id)))
        (org-map-entries
         (lambda ()
           (org-entry-put (point) "CUSTOM_ID" (get-id)))))))
#+end_src
- Another one that does more parsing of non-alphanumerics
#+begin_src emacs-lisp
  (defun ak/org-get-headline-based-ids (&rest _) 
    "Source: https://alhassy.github.io/AlBasmala.html#Ensuring-Useful-HTML-Anchors 
    All non-alphanumeric characters are cleverly replaced with â-â.
    If multiple trees end-up with the same id property, issue a
    message and undo any property insertion thus far.
    E.g., â¯ We'll go on a âââ adventure
       â¦  We'll-go-on-a-adventure
    "
    (interactive)
    (let ((ids))
      (org-map-entries
       (lambda ()
         (org-with-point-at (point)
           (let ((id (org-entry-get nil "CUSTOM_ID")))
             (unless id
               (thread-last (nth 4 (org-heading-components))
                 (s-replace-regexp "[^[:alnum:]']" "-")
                 (s-replace-regexp "-+" "-")
                 (s-chop-prefix "-")
                 (s-chop-suffix "-")
                 (setq id))
               (if (not (member id ids))
                   (push id ids)
                 (message-box "Oh no, a repeated id!\n\n\t%s" id)
                 (undo)
                 (setq quit-flag t))
               (org-entry-put nil "CUSTOM_ID" id))))))))
#+end_src
** Modules
:PROPERTIES:
:ID:       0cbbed90-4cb3-4af7-b9b4-11d177328017
:END:
#+begin_src emacs-lisp
  (setq org-modules '(org-habit
                      ;; Defaults below:
                      ol-w3m
                      ol-bbdb
                      ol-bibtex
                      ol-docview
                      ol-gnus
                      ol-info
                      ol-irc
                      ol-mhe
                      ol-rmail
                      ol-eww))
#+end_src
** Images (allow for resizing with imagemagick)
:PROPERTIES:
:ID:       3f9556d3-7a43-4c16-8aa6-62b97fc2454e
:END:
#+begin_src emacs-lisp
  (setq org-image-actual-width nil)
#+end_src
** Hyphens to dots
:PROPERTIES:
:ID:       24e526f3-eaa4-4d82-836a-ef3ac76312cb
:END:
- Customize the leading list element char.
#+BEGIN_SRC emacs-lisp
  (font-lock-add-keywords `org-mode
			  `(("^ *\\([-]\\) "
			     (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "Â·"))))))
#+END_SRC
** Org-tempo
:PROPERTIES:
:ID:       b6bdd19d-6fea-4625-b69d-6a30e7184816
:END:
- [[https://orgmode.org/manual/Structure-Templates.html][Org Manual page]]
- For shortcuts like "<s TAB" for inserting code block
#+BEGIN_SRC emacs-lisp
  (require 'org-tempo)
#+END_SRC
** Org-bullets
:PROPERTIES:
:ID:       ba2490f2-7e3c-4351-be9f-8643e7edeac0
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :after org
    :hook (org-mode . org-bullets-mode))
#+END_SRC
** org-format-latex
:PROPERTIES:
:ID:       cccbaae3-f942-4c93-98c5-a490a3e1edcc
:END:
#+begin_src emacs-lisp
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2))
#+end_src
** Fold non-current headers
:PROPERTIES:
:ID:       4c1c5bb0-ddda-48f8-95a1-ab171d4b51dd
:END:
- [[https://sainathadapa.github.io/emacs-spacemacs-config/org-config#org497a041][Source]]
#+begin_src emacs-lisp
  (defun ak/org-show-current-heading-tidily ()
    (interactive)
    "Show next entry, keeping other entries closed."
    (if (save-excursion (end-of-line) (outline-invisible-p))
        (progn (org-show-entry) (show-children))
      (outline-back-to-heading)
      (unless (and (bolp) (org-on-heading-p))
        (org-up-heading-safe)
        (hide-subtree)
        (error "Boundary reached"))
      (org-overview)
      (org-reveal t)
      (org-show-entry)
      (show-children)))
#+end_src
** Never add new lines after headlines
:PROPERTIES:
:ID:       d2ae51b2-7f74-4bc9-88f5-2a1fdfc4540c
:END:
- Changed mind. I want the blank lines now (esp. for journal).
#+begin_src emacs-lisp
  ;; (setf org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))
  (setf org-blank-before-new-entry '((heading . auto)
                                    (plain-list-item . auto)))
#+end_src
** Possible additions...
*** Setting fonts, etc.
  (dolist (face `((org-level-1 . 1.2 )
		  (org-level-2 . 1.1 )
		  (org-level-3 . 1.05 )
		  (org-level-4 . 1.0 )
		  (org-level-5 . 1.0 )
		  (org-level-6 . 1.1 )
		  (org-level-7 . 1.1 )
		  (org-level-8 . 1.1 )))
		  (set-face-attribute (car face) nil :font "courier" :weight `regular :height (cdr face)))
* anki-editor
:PROPERTIES:
:ID:       27e07ae9-a8ec-4b08-b0d1-ccbf85a930f7
:END:
Src:[[https://yiufung.net/post/anki-org/][blog]], [[https://github.com/yiufung/dot-emacs/blob/master/init.el][yiufung init.el]]
#+begin_src emacs-lisp
  (use-package anki-editor
    :ensure t
    :bind (:map org-mode-map
                ("<f12>" . anki-editor-cloze-region-dont-incr)
                ("<f11>" . anki-editor-cloze-region-auto-incr)
                ("<f10>" . anki-editor-reset-cloze-number)
                ("<f9>"  . anki-editor-push-tree))
    :hook (org-capture-after-finalize . anki-editor-reset-cloze-number) ; Reset cloze-number after each capture.
    :config
    (setq anki-editor-create-decks t
          anki-editor-org-tags-as-anki-tags t)

    (defun anki-editor-cloze-region-auto-incr (&optional arg)
      "Cloze region without hint and increase card number."
      (interactive)
      (anki-editor-cloze-region my-anki-editor-cloze-number "")
      (setq my-anki-editor-cloze-number (1+ my-anki-editor-cloze-number))
      (forward-sexp))
    (defun anki-editor-cloze-region-dont-incr (&optional arg)
      "Cloze region without hint using the previous card number."
      (interactive)
      (anki-editor-cloze-region (1- my-anki-editor-cloze-number) "")
      (forward-sexp))
    (defun anki-editor-reset-cloze-number (&optional arg)
      "Reset cloze number to ARG or 1"
      (interactive)
      (setq my-anki-editor-cloze-number (or arg 1)))
    (defun anki-editor-push-tree ()
      "Push all notes under a tree."
      (interactive)
      (anki-editor-push-notes '(4))
      (anki-editor-reset-cloze-number))
    ;; Initialize
    (anki-editor-reset-cloze-number)
    )


  ;; Org-capture templates
  (setq org-my-anki-file "~/org/anki.org")

	     






	     
  ;;              '("a" "Anki basic"
  ;;                entry
  ;;                (file+headline org-my-anki-file "Dispatch Shelf")
  ;;                "* %U  \n:PROPERTIES:\n:ANKI_NOTE_TYPE: Basic\n:ANKI_DECK: main\n:ANKI_TAGS:\n:END:\n** Front\n%?\n** Back\n\n"))
  ;; (add-to-list 'org-capture-templates
  ;;              '("A" "Anki cloze"
  ;;                entry
  ;;                (file+headline org-my-anki-file "Dispatch Shelf")
  ;;                "* %U  ^g \n:PROPERTIES:\n:ANKI_NOTE_TYPE: Cloze\n:ANKI_DECK: main\n:ANKI_TAGS:\n:END:\n** Text\n\n** Extra\n\n"))
  ;; (add-to-list 'org-capture-templates
  ;;              '("T" "Anki Type"
  ;;                entry
  ;;                (file+headline org-my-anki-file "Dispatch Shelf")
  ;;                "* %U  %^g\n:PROPERTIES:\n:ANKI_NOTE_TYPE: Type\n:ANKI_DECK: main\n:ANKI_TAGS:\n:END:\n** Front\n%?\n** Back\n\n"))


#+end_src
* Ivy, counsel, swiper
:PROPERTIES:
:ID:       9e6e4ef7-5aa9-4301-826f-2ec5a49b4f4c
:END:
#+begin_src emacs-lisp
  (use-package counsel  ;; Brings in ivy and swiper as dependencies
    :ensure t
    :config
    (setq ivy-use-virtual-buffers t
          ivy-count-format "%d/%d ")
    )

  (ivy-mode 1)
#+end_src
* Eww
:PROPERTIES:
:ID:       eae6f0ac-5480-4ea3-8389-5889c487858f
:END:
#+begin_src emacs-lisp

#+end_src
* Multiple cursors
:PROPERTIES:
:ID:       7932b3d1-59fc-4075-9d72-efa1b0cce146
:END:
- Doesn't work well with =M-x=, needs key-bindings.
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :config
    (global-set-key (kbd "C-c m e") 'mc/edit-lines)
    (global-set-key (kbd "C-c m f") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-c m b") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c m a") 'mc/mark-all-like-this)
    (define-key mc/keymap (kbd "<return>") nil)  ;; Allows us to insert new-line with <RET> and still disable multiple-cursor mode with C-g
    )
#+end_src
* Olivetti
:PROPERTIES:
:ID:       8f172f3f-2017-483d-bbda-d492467620d3
:END:
- Centers text by widening the margins.
#+begin_src emacs-lisp
  (use-package olivetti
    :ensure t
    :config
    (setq olivetti-body-width 80)
    ;; (setq olivetti-minimum-body-width 50)
    :bind
    ("C-c o" . olivetti-mode))
#+end_src
* Smartparens
:PROPERTIES:
:ID:       ff9cbb86-b3b8-480c-b2b8-1c3d62a10c7b
:END:
#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (progn
      (smartparens-global-mode -1)))
    ;; :diminish smartparens-mode
    ;; :hook (prog-mode . smartparens-strict-mode)
    ;; :config
    ;; (require 'smartparens-config)
    ;; (show-smartparens-global-mode 1))
#+end_src
* which-key
:PROPERTIES:
:ID:       a67ef17a-f150-4aea-bf58-69d89b3f7572
:END:
- Provide popup info on commands given input current sequence.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC
* Avy
:PROPERTIES:
:ID:       fd37c3e1-7b47-4a7a-a83b-1aa4d0926078
:END:
- Fast navigation to any char on screen.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
* Ido
- Smart file completion.
- [2021-03-07 Sun 23:51] Switching to Ivy.
** Enable Ido-mode
:PROPERTIES:
:ID:       9b4388fb-f79e-41b8-88b8-cf799cbd8317
:END:
#+BEGIN_SRC emacs-lisp
  ;; (ido-mode 1)
  ;; (setq ido-everywhere t)
  ;; (setq ido-enable-flex-matching t)
  ;; (setq ido-create-new-buffer `always)
#+END_SRC
* ace-window
:PROPERTIES:
:ID:       22367bdc-0fe5-4fb7-8638-f36c4880b0d4
:END:
- Navigate buffers efficently.
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :config (setq aw-keys `(?a ?s ?d ?f ?j ?k ?l))
    :bind ("C-x o" . ace-window))
#+END_SRC
* rainbow
:PROPERTIES:
:ID:       a6397383-0a81-4c23-99ac-fa469bc10941
:END:
- Add coloring to hex color tags (e.g. #22ff22).
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :hook
    (prog-mode-hook . rainbow-mode))
#+END_SRC
* beacon
:PROPERTIES:
:ID:       c61b5de4-d377-4976-8c50-5dc1607f1408
:END:
- Highlight cursor line.
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC
* Config edit/reload
:PROPERTIES:
:ID:       ff6369e1-7ca6-443b-a21c-48faef33bf2a
:END:
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+end_src
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src
* window splitting functions
:PROPERTIES:
:ID:       d264734a-f207-4fef-a38e-8bdbc87d3b67
:END:
- Move cursor to newly created windows (default is stagnant cursor).
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") `split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") `split-and-follow-vertically)
#+END_SRC
* drag-stuff CONFLICT WITH ORG
:PROPERTIES:
:ID:       5682e5b8-e7b5-42b4-ad47-34afb94ae55c
:END:
#+begin_src emacs-lisp
  ;; (use-package drag-stuff
  ;;   :ensure t
  ;;   :config
  ;;   (progn
  ;;     (drag-stuff-global-mode t)
  ;;     (drag-stuff-define-keys))
  ;;   :bind
  ;;   (("M-p" . drag-stuff-up)
  ;;    ("M-n" . drag-stuff-down)))
#+end_src


