* Basic Adjustments
** Basic UI
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq visible-bell t)
  (setq scroll-conservatively 100)
  ;; (setq-default cursor-type `bar)
  ;; (set-cursor-color "#a5fbff")
  (blink-cursor-mode 1)
  (when window-system (global-hl-line-mode t))
  ;; (global-prettify-symbols-mode t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
** Autosave and backups
*** Custom dir
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `((".*" . "~/emacs-backups/")))
  (setq auto-save-file-name-transforms
        `((".*" "~/emacs-backups/" t)))
#+END_SRC
*** Delete old files
- Delete old backups not accessed for a week (from emacs wiki: https://www.emacswiki.org/emacs/BackupDirectory#toc2)
#+BEGIN_SRC emacs-lisp
  (message "Deleting old backup files...")
  (let ((week (* 60 60 24 7))
        (current (float-time (current-time))))
    (dolist (file (directory-files temporary-file-directory t))
      (when (and (backup-file-name-p file)
                 (> (- current (float-time (fifth (file-attributes file))))
                    week))
        (message "%s" file)
        (delete-file file))))
#+END_SRC
* Font and faces
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :height 150)
#+end_src
* Modeline
#+begin_src emacs-lisp
  (setq column-number-mode t)
#+end_src
* File shortcuts & bookmarks
- Shortcuts to open common files in new frames to enable control with i3.
** Files
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c n")
                  (lambda () (interactive) (find-file-other-frame "~/org/now.org")))
  (global-set-key (kbd "C-c o")
                  (lambda () (interactive) (find-file-other-frame "~/org/orgbox.org")))
  (global-set-key (kbd "C-c t")
                  (lambda () (interactive) (find-file-other-frame "~/org/tasks.org")))
  (global-set-key (kbd "C-c j")
                  (lambda () (interactive) (find-file-other-frame "~/org/journal.org")))
#+end_src
** Bookmarks
#+begin_src emacs-lisp
  (global-set-key (kbd "<f1>") '(lambda () (interactive) (bookmark-set "SAVED")))
  (global-set-key (kbd "<f2>") '(lambda () (interactive) (bookmark-jump "SAVED")))
#+end_src
* Org
- [[https://orgmode.org/org.html][Org Manual]]
** Setup (ellispsis, emphasis, indent, etc)
#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    (setq org-startup-indented t
          org-ellipsis " Â»"
          org-hide-emphasis-markers t
          )
    (add-hook 'org-mode-hook #'visual-line-mode))
#+END_SRC
** Global Org keys
- Recommended global commands (org manual)
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c l") `org-store-link)
  (global-set-key (kbd "C-c a") `org-agenda)
  (global-set-key (kbd "C-c c") `org-capture)
#+end_src
** STARTED Export & Publishing WIP
:LOGBOOK:
- State "STARTED"    from              [2021-02-17 Wed 15:34]
:END:
*** Export
#+begin_src emacs-lisp
  (require 'ox-html)
  (use-package htmlize
    :ensure t
    :config
    (setq org-html-htmlize-output-type 'css))
  (setq org-export-with-section-numbers nil
        org-export-with-toc nil
        org-export-with-tags nil
        )
#+end_src
*** Publish
#+begin_src emacs-lisp
  (require 'ox-publish)
  ;; (require 'ox-html)
  (setq org-publish-project-alist
        '(
          ("ajpkim-posts"
           :base-directory "~/test-site/org/"
           :base-extension "org"
           :publishing-directory "~/test-site/jekyll/"
           :recursive t
           :publishing-function org-html-publish-to-html
           :html-extension "html"
           :body-only t ;; Only export section between <body> </body>
           ;; :with-toc nil
           )
          ("ajpkim-assets"
           :base-directory "~/test-site/assets/"
           :base-extension "css\\|scss\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3"
           :publishing-directory "~/test-site/jekyll/assets/"
           :recursive t
           :publishing-function org-publish-attachment
           )
          ("ajpkim" :components ("ajpkim-posts" "ajpkim-assets"))
          ))
#+end_src
** Agenda
*** Agenda files
- Doing manually now with =C-c [= and =C-c ]=.
- Another solution with recursive file search:
  - =(setq org-agenda-files (directory-files-recursively "~/org/" "\\.org$"))=
- Can also create a file with a /list/ of files to read and then can append and remove from this list easily (I believe).
#+begin_src emacs-lisp
  ;; (setq org-agenda-files '("~/org/"))
#+end_src
*** TODO Base settings
:LOGBOOK:
- State "TODO"       from              [2021-01-29 Fri 22:59]
:END:
#+begin_src emacs-lisp
  (setq org-agenda-span 5 ;; Number of days to show in agenda
        org-agenda-start-on-weekday nil  ;; Start from current day
        org-agenda-skip-deadline-if-done t  ;; Declutter the agenda
        org-agenda-skip-scheduled-if-done t
        org-agenda-window-setup 'current-window
        )
#+end_src
*** Agenda global TODO list decluttering
- Turned off.
#+begin_src emacs-lisp
  (setq org-agenda-todo-ignore-deadlines nil
        org-agenda-todo-ignore-scheduled nil)
#+end_src
*** TODO Custom agenda views
- [ ] Create view for top level completed tasks.
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        '(("n" "Simple agenda/tasks view"
           ((agenda "")
            (alltodo "")))
          ("x" "NEXT and STARTED tasks"
           ((todo "STARTED")
            (todo "NEXT")))
          ;; ("d" "Archiving" todo "DONE|PASS")
          ("w" "Writing inbox"
           ((tags "seed")))
          ("r" "Review items"
           ((tags "review")))
          ))
#+end_src
** TODOs
- The "!" triggers autologging (into the LOGBOOK).
#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t!)" "NEXT(n!)" "STARTED(s!)" "HOLD(h!)" "|" "DONE(d!)" "PASS(p!)")))

  (setq org-todo-keyword-faces
        '(
          ("TODO" . (:foreground "#ffff66" :weight bold))
          ("NEXT" . (:foreground "#44ddff" :weight bold))
          ("STARTED" . (:foreground "#44ddff" :weight bold))
          ("WAITING" . (:foreground "#df784e" :weight bold))
          ("DONE" . (:foreground "#19ffaf" :weight bold))
          ("PASS" . (:foreground "#ff3d40" :weight bold))))

  ;; (setq org-log-done 'time)  ;; Don't need with all other logging in LOGBOOK
  (setq org-log-into-drawer "LOGBOOK")

  ;; Don't set timestamp or note when shifting through TODO states.
  ;; (setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+end_src
** Capture (templates)
- May want to use =org-directory= variable here.
- Can use headlines within files to file different types of data within single file.
#+begin_src emacs-lisp
  (setq org-capture-templates
        '(("b" "Blank (immediate refile)" entry (file "~/org/orgbox.org")
           "* %?")
          ("c" "Clocked In Task" plain (clock)
           "- %?")
          ("d" "Org-drill Note" entry (file "~/org/drill/drill-notes.org")
           "* %^ :drill:\n- %?")
          ("D" "Dream Journal" entry (file+olp+datetree "~/org/journal.org")
           "* Dream :dream:\n:PROPERTIES:\n:CREATED: %U\n:END:\n- %?"
           :clock-in t
           :clock-resume t)
          ("f" "Free Write" entry (file+olp+datetree "~/org/journal.org")
           "*  %^ :freewrite:\n:PROPERTIES:\n:CREATED: %U\n:END:\n- %?"
           :clock-in t
           :clock-resume t)
          ("j" "Journal" entry (file+olp+datetree "~/org/journal.org")
           "* %^\n:PROPERTIES:\n:CREATED: %U\n:END:\n- %?")
          ("n" "Notes" entry (file "~/org/orgbox.org")
           "* %^ %^g:notes:\n:PROPERTIES:\n:CREATED: %U\n:END:\n- %?"
           :clock-in t
           :clock-resume t
           :prepend t)
          ("o" "Orgbox" entry (file "~/org/orgbox.org")
           "* %^\n:PROPERTIES:\n:CREATED: %U\n:END:\n- %?"
           :clock-in t
           :clock-resume t
           :prepend t)
          ("q" "Read/Watch/Listen" entry (file "~/org/media-lists.org")
           "** %?"
           :prepend t)
          ("r" "Recommendation" entry (file+headline "~/org/orgbox.org" "Recs")
           ;; "* %^ \n%^{RECOMMENDER}p%^{TYPE}p:CREATED:%U\n- %?")
           "* %^\n:PROPERTIES:\n:CREATED: %U\n:RECOMMENDER: %^\n:TYPE: %^\n:END:%?")
          ("t" "Todo" entry (file"~/org/tasks.org")
           "* TODO %^\n:PROPERTIES:\n:CREATED: %U\n:END:\n- %?"
           :prepend t)
          ("y" "Today" entry (file"~/org/tasks.org")
           "* NEXT %^\nSCHEDULED: %t\n:PROPERTIES:\n:CREATED: %U\n:END:%?")
          ))
#+end_src
** Refile
- Look in current file and all agenda files for refile menu.
#+begin_src emacs-lisp
  (setq org-refile-targets
        '((nil :maxlevel . 6)
          (org-agenda-files . (:maxlevel . 6))))
  ;; Complete refile with IDO
  (setq org-refile-use-outline-path 'file)  ;; Allows for refiling as top level node
  (setq org-outline-path-complete-in-steps nil)  ;; Have org get all targets at once and allow IDO to narrow
  (setq org-refile-allow-creating-parent-nodes  (quote confirm))
#+end_src
** Tags
- Can use =C-c C-c= and single key selection (in expert mode) to add tags quickly.
#+begin_src emacs-lisp
  (setq org-tag-alist
        '(
          ("drill" . ?d)
          ("notes" . ?n)
          ("seed" . ?s)
          ("study" . ?y)
          ("week" . ?w)
          ("5m" . ?f)
          ))
  (setq org-fast-tag-selection-single-key (quote expert))
#+end_src
** Org-drill
#+begin_src emacs-lisp
  (use-package org-drill
    :ensure t)
#+end_src
** toc-org
#+begin_src emacs-lisp
  (use-package toc-org
    :ensure t
    :config
    (setq toc-org-max-depth 3
          toc-org-hrefify-default "org"  ;; Options are org or gh (github)
          )
    )

#+end_src
** Org-id
- Can add a before save hook for org-mode file if want to.
- Testing : [[https://writequit.org/articles/emacs-org-mode-generate-ids.html#automating-id-creation][SO]]
#+begin_src emacs-lisp
  (defun ak/org-uuid-custom-id-get (&optional pom create prefix)
    "Get the CUSTOM_ID property of the entry at point-or-marker POM.
     If POM is nil, refer to the entry at point. If the entry does
     not have an CUSTOM_ID, the function returns nil. However, when
     CREATE is non nil, create a CUSTOM_ID if none is present
     already. PREFIX will be passed through to `org-id-new'. In any
     case, the CUSTOM_ID of the entry is returned."
    (interactive)
    (org-with-point-at pom
      (let ((id (org-entry-get nil "CUSTOM_ID")))
        (cond
         ((and id (stringp id) (string-match "\\S-" id))
          id)
         (create
          ;; (setq id (org-id-new (concat prefix "h")))
          (setq id (org-id-new))
          (org-entry-put pom "CUSTOM_ID" id)
          (org-id-add-location id (buffer-file-name (buffer-base-buffer)))
          id)))))

  (defun ak/org-add-uudid-custom-ids-to-headlines-in-file ()
    "Add CUSTOM_ID properties to all headlines in the
     current file which do not already have one."
    (interactive)
    (org-map-entries (lambda () (ak/org-uuid-custom-id-get (point) 'create))))

#+end_src
- Another option with CUSTOM_IDs that are based on headers (want this for blog exports)
- IMPROVE THE regexp replace to make better urls
#+begin_src emacs-lisp
  (defun ak/org-publish-add-header-text-custom-ids ()
    "Add CUSTOM_ID property to each header in current buffer that is based on header text."
    (interactive)
    (let (id-list)
      (cl-labels ((get-id ()
                          (let ((id (url-encode-url
                                     (replace-regexp-in-string
                                      " " "-"
                                      (org-get-heading t t t t))))
                                (dup-counter 1))
                            (while (member id id-list)
                              (setq id (format "%s-%d" id dup-counter))
                              (cl-incf dup-counter))
                            (push id id-list)
                            id)))
        (org-map-entries
         (lambda ()
           (org-entry-put (point) "CUSTOM_ID" (get-id)))))))
#+end_src
** Modules
#+begin_src emacs-lisp
  (setq org-modules '(org-habit
                      ;; Defaults below:
                      ol-w3m
                      ol-bbdb
                      ol-bibtex
                      ol-docview
                      ol-gnus
                      ol-info
                      ol-irc
                      ol-mhe
                      ol-rmail
                      ol-eww))
#+end_src
** Hyphens to dots
- Customize the leading list element char.
#+BEGIN_SRC emacs-lisp
  (font-lock-add-keywords `org-mode
			  `(("^ *\\([-]\\) "
			     (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "Â·"))))))
#+END_SRC
** Org-tempo
- [[https://orgmode.org/manual/Structure-Templates.html][Org Manual page]]
- For shortcuts like "<s TAB" for inserting code block
#+BEGIN_SRC emacs-lisp
  (require 'org-tempo)
#+END_SRC
** Org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :after org
    :hook (org-mode . org-bullets-mode))
#+END_SRC
** org-format-latex
#+begin_src emacs-lisp
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2))
#+end_src
** Never add new lines after headlines
#+begin_src emacs-lisp
  (setf org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))
#+end_src
** TODO (I think bc elpa package) Visual fill column
:LOGBOOK:
- State "TODO"       from              [2021-01-29 Fri 15:20]
:END:
NOT WORKING #+BEGIN_SRC emacs-lisp
  (defun org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . org-mode-visual-fill))
#+END_SRC
** Possible additions...
*** Setting fonts, etc.
  (dolist (face `((org-level-1 . 1.2 )
		  (org-level-2 . 1.1 )
		  (org-level-3 . 1.05 )
		  (org-level-4 . 1.0 )
		  (org-level-5 . 1.0 )
		  (org-level-6 . 1.1 )
		  (org-level-7 . 1.1 )
		  (org-level-8 . 1.1 )))
	(set-face-attribute (car face) nil :font "courier" :weight `regular :height (cdr face)))
* which-key
- Provide popup info on commands given input current sequence.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC
* Avy
- Fast navigation to any char on screen.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
* Ido
- Smart file completion.
** Enable Ido-mode
#+BEGIN_SRC emacs-lisp
  (ido-mode 1)
  (setq ido-everywhere t)
  (setq ido-enable-flex-matching t)
  (setq ido-create-new-buffer `always)
#+END_SRC
* ace-window
- Navigate buffers efficently.
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :config (setq aw-keys `(?a ?s ?d ?f ?j ?k ?l))
    :bind ("C-x o" . ace-window))
#+END_SRC
* rainbow
- Add coloring to hex color tags (e.g. #22ff22).
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (rainbow-mode 1))
#+END_SRC
* beacon
- Highlight cursor line.
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC
* Config edit/reload
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+end_src
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src
* window splitting functions
- Move cursor to newly created windows (default is stagnant cursor).
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") `split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") `split-and-follow-vertically)
#+END_SRC
* drag-stuff CONFLICT WITH ORG
#+begin_src emacs-lisp
  ;; (use-package drag-stuff
  ;;   :ensure t
  ;;   :config
  ;;   (progn
  ;;     (drag-stuff-global-mode t)
  ;;     (drag-stuff-define-keys))
  ;;   :bind
  ;;   (("M-p" . drag-stuff-up)
  ;;    ("M-n" . drag-stuff-down)))
#+end_src
* TODO multiple-cursors
