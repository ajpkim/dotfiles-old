* Basic Adjustments
** Basic UI
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq visible-bell t)
  (setq scroll-conservatively 100)
  ;; (setq-default cursor-type `bar)
  ;; (set-cursor-color "#a5fbff")
  (blink-cursor-mode 1)
  (when window-system (global-hl-line-mode t))
  ;; (global-prettify-symbols-mode t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
** Autosave and backups
*** Custom dir 
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `((".*" . "~/emacs-backups/")))
  (setq auto-save-file-name-transforms
        `((".*" "~/emacs-backups/" t)))
#+END_SRC
*** Delete old files
- Delete old backups not accessed for a week (from emacs wiki: https://www.emacswiki.org/emacs/BackupDirectory#toc2)
#+BEGIN_SRC emacs-lisp
  (message "Deleting old backup files...")
  (let ((week (* 60 60 24 7))
        (current (float-time (current-time))))
    (dolist (file (directory-files temporary-file-directory t))
      (when (and (backup-file-name-p file)
                 (> (- current (float-time (fifth (file-attributes file))))
                    week))
        (message "%s" file)
        (delete-file file))))
#+END_SRC
* Org
- [[https://orgmode.org/org.html][Org Manual]]
** Setup (ellispsis, emphasis, indent, etc)
#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    (setq org-startup-indented t
          org-ellipsis " »"
          org-hide-emphasis-markers t)
    (add-hook 'org-mode-hook #'visual-line-mode))
#+END_SRC
** Org TODOs
- Can add styling for =org-tag-faces= similar to TODOs.
#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t!)" "STARTED(s!)" "WAITING(w!)" "|" "DONE(d!)" "PASS(p!)")))

  (setq org-todo-keyword-faces
        '(
          ("TODO" . (:foreground "#ffff66" :weight bold))
          ("WAITING" . (:foreground "#ffff66" :weight bold))
          ("STARTED" . (:foreground "#44ddff" :weight bold))
          ("DONE" . (:foreground "#19ffaf" :weight bold))
          ("PASS" . (:foreground "#ff3d40" :weight bold))))

  ;; (setq org-log-done 'time)  ;; Don't need with all other logging in LOGBOOK
  (setq org-log-into-drawer "LOGBOOK")
#+end_src

** Global commands
- Recommended global commands (org manual)
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c l") `org-store-link)
  (global-set-key (kbd "C-c a") `org-agenda)
  (global-set-key (kbd "C-c c") `org-capture)
#+end_src
** Org-tempo
- [[https://orgmode.org/manual/Structure-Templates.html][Org Manual page]]
- For shortcuts like "<s TAB" for inserting code block
#+BEGIN_SRC emacs-lisp
  (require 'org-tempo)
#+END_SRC
** Org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :after org
    :hook (org-mode . org-bullets-mode))
#+END_SRC
** Hyphens to dots
- Customize the leading list element char.
#+BEGIN_SRC emacs-lisp
  (font-lock-add-keywords `org-mode
			  `(("^ *\\([-]\\) "
			     (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "·")))))) 
#+END_SRC
** org-format-latex
#+begin_src emacs-lisp
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
#+end_src
** FIX (I think bc elpa package) Visual fill column
NOT WORKING #+BEGIN_SRC emacs-lisp
  (defun org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . org-mode-visual-fill))
#+END_SRC
** Possible additions...
*** Setting fonts, etc.
  (dolist (face `((org-level-1 . 1.2 )
		  (org-level-2 . 1.1 )
		  (org-level-3 . 1.05 )
		  (org-level-4 . 1.0 )
		  (org-level-5 . 1.0 )
		  (org-level-6 . 1.1 )
		  (org-level-7 . 1.1 )
		  (org-level-8 . 1.1 )))
	(set-face-attribute (car face) nil :font "courier" :weight `regular :height (cdr face)))
* which-key
- Provide popup info on commands given input current sequence.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC
* Avy
- Fast navigation to any char on screen.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
* Ido
- Smart file completion.
** Enable Ido-mode
#+BEGIN_SRC emacs-lisp
  (ido-mode 1)
  (setq ido-everywhere t)
  (setq ido-enable-flex-matching t)
  (setq ido-create-new-buffer `always)
#+END_SRC
* ace-window
- Navigate buffers efficently.
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :config (setq aw-keys `(?a ?s ?d ?f ?j ?k ?l))
    :bind ("C-x o" . ace-window))
#+END_SRC
* rainbow
- Add coloring to hex color tags (e.g. #22ff22).
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (rainbow-mode 1))
#+END_SRC
* beacon
- Highlight cursor line.
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC
* Config edit/reload
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+end_src
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src
* window splitting functions
- Move cursor to newly created windows (default is stagnant cursor).
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") `split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") `split-and-follow-vertically)
#+END_SRC
* drag-stuff CONFLICT WITH ORG
#+begin_src emacs-lisp
  ;; (use-package drag-stuff
  ;;   :ensure t
  ;;   :config
  ;;   (progn
  ;;     (drag-stuff-global-mode t)
  ;;     (drag-stuff-define-keys))
  ;;   :bind
  ;;   (("M-p" . drag-stuff-up)
  ;;    ("M-n" . drag-stuff-down)))
#+end_src
* TODO multiple-cursors
