#+TITLE: Emacs Config
#+STARTUP: overview
#+SETUPFILE: ~/org/assets/org-export/org-html-default.org

* Minimal and functional UI
** Base
:PROPERTIES:
:ID:       f67c7e58-6d4a-4ba3-a13e-f00b4cefc79f
:END:
#+begin_src emacs-lisp
  ;; Minimal functional UI
  (setq inhibit-startup-message t)
  (setq visible-bell t)
  (blink-cursor-mode 1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (setq scroll-conservatively 100)
  (setq scroll-preserve-screen-position t)  ;; http://www.gnu.org/software/emacs/manual/html_node/emacs/Scrolling.html#index-scroll_002dpreserve_002dscreen_002dposition
  (global-hl-line-mode t)

  ;; control default size
  (set-face-attribute 'default nil :height 150)

  ;; Modeline
  (setq column-number-mode t)

  ;; Packages for visual clarity
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))

  (use-package rainbow-mode
    :ensure t
    :init
    (rainbow-mode 1))

  (use-package rainbow-delimiters
    :ensure t)

  ;; QoL
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))

  (setq x-select-enable-clipboard t
        x-select-enable-primary t)

  (add-hook 'before-save-hook
            'delete-trailing-whitespace)
  (global-auto-revert-mode t)

  ;; Set autosave and backup locations
  (setq backup-directory-alist
        `((".*" . "~/emacs-backups/")))
  (setq auto-save-file-name-transforms
        `((".*" "~/emacs-backups/" t)))
#+end_src

** Themes
*** Modus themes
:PROPERTIES:
:ID:       1013493d-2960-40b6-a457-958171170583
:END:
#+begin_src elisp
  (use-package modus-themes
    :ensure t
    :init
    ;; Add all your customizations prior to loading the themes
    (setq modus-themes-slanted-constructs t
          modus-themes-bold-constructs nil
          ;; modus-themes-region 'no-extend
          modus-themes-org-habit 'simplified)
    ;; Load the theme files before enabling a theme
    (modus-themes-load-themes)
    :config
    ;; Load the theme of your choice:
    (modus-themes-load-vivendi) ;; OR (modus-themes-load-operandi)
    :bind ("<f5>" . modus-themes-toggle))

  (define-minor-mode my/modus-themes-tinted
    "Tweak some Modus themes colors."
    :init-value nil
    :global t
    (if my/modus-themes-tinted
        (setq modus-themes-operandi-color-overrides
              '((bg-main . "#fefcf4")
                (bg-dim . "#faf6ef")
                (bg-alt . "#f7efe5")
                (bg-hl-line . "#f4f0e3")
                (bg-active . "#e8dfd1")
                (bg-inactive . "#f6ece5")
                (bg-region . "#c6bab1")
                (bg-header . "#ede3e0")
                (bg-tab-bar . "#dcd3d3")
                (bg-tab-active . "#fdf6eb")
                (bg-tab-inactive . "#c8bab8")
                (fg-unfocused . "#55556f"))
              modus-themes-vivendi-color-overrides
              '(
                ;; (bg-main . "#100b17")  ; makes emacs in terminal all light blue bg
                ;; (bg-main . "#2e3440")  ; nord-0
                ;; (bg-main . "#3b4252")  ; nord-1
                (bg-dim . "#161129")
                (bg-alt . "#1e1e1e")  ; original  "#181732" bad in terminal
                (bg-hl-line . "#191628")
                (bg-active . "#282e46")
                (bg-inactive . "#1a1e39")
                (bg-region . "#393a53")
                (bg-header . "#202037")
                (bg-tab-bar . "#262b41")
                (bg-tab-active . "#120f18")
                (bg-tab-inactive . "#3a3a5a")
                (fg-unfocused . "#9a9aab")))
      (setq modus-themes-operandi-color-overrides nil
            modus-themes-vivendi-color-overrides nil)))

  (set-face-attribute 'org-scheduled-previously nil :foreground "#ffa500")
  (set-face-attribute 'org-scheduled-today nil :foreground "#d6b0ff")

  (set-face-attribute 'line-number nil :background "#000000")  ;; line number background is too distinct

  ;; (modus-themes-load-vivendi)
#+end_src
*** Deeper Blue
:PROPERTIES:
:ID:       487b98d1-60d8-42ba-bc66-aef381ace31f
:END:
#+begin_src emacs-lisp
  ;; (load-theme 'deeper-blue t)

  (set-face-attribute 'fringe nil :background "#00000000")  ;; Make window fringes transparent
#+end_src

** Olivetti
:PROPERTIES:
:ID:       abd1cfbe-bcd1-4fbe-a7c1-7f9bec5b30af
:END:
#+begin_src elisp
  (use-package olivetti
    :ensure t
    :config
    (setq-default olivetti-body-width 80)
    :bind
    ("C-c o" . olivetti-mode)
    ("C-c h o" . olivetti-set-width))
#+end_src
* Navigation
:PROPERTIES:
:ID:       ccbdce54-bb59-42c4-924d-9ab03ee60d1f
:END:
#+begin_src elisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))

  (use-package ace-window
    :ensure t
    :config (setq aw-keys `(?a ?s ?d ?f ?j ?k ?l))
    :bind ("C-x o" . ace-window))

  (defun my/file-shortcut (file)
    (interactive)
    (if (file-exists-p file)
        (if (equal current-prefix-arg nil)  ;; no C-u
            (find-file file)
          (find-file-other-frame file))))

  (global-set-key (kbd "C-c f a")
                  (lambda () (interactive) (my/file-shortcut "~/org/alex.org")))
  (global-set-key (kbd "C-c f A")
                  (lambda () (interactive) (my/file-shortcut "~/org/anki.org")))
  (global-set-key (kbd "C-c f i")
                  (lambda () (interactive) (my/file-shortcut "~/org/inbox.org")))
  (global-set-key (kbd "C-c f l")
                  (lambda () (interactive) (my/file-shortcut "~/org/links.org")))
  (global-set-key (kbd "C-c f r")
                  (lambda () (interactive) (my/file-shortcut "~/org/read-watch-listen.org")))
  (global-set-key (kbd "C-c f t")
                  (lambda () (interactive) (my/file-shortcut "~/org/tech.org")))

  ;; Make cursor follow to new windows
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") `split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") `split-and-follow-vertically)
#+END_SRC
* Editing helpers
:PROPERTIES:
:ID:       06d333c2-7538-46b8-837d-df3f94725e46
:END:
#+begin_src elisp
  ;; Simple functions
  (defun insert-raquo ()
    (interactive)
    (insert "»"))

  (defun insert-dots-glyph ()
    "Use this to signal my personal voice when notetaking etc."
    (interactive)
    (insert "܀"))

  (defun insert-right-arrow ()
    "Use this to signal my personal voice when notetaking etc."
    (interactive)
    (insert "→"))

  (defun insert-down-right-arrow ()
    "Use this to signal my personal voice when notetaking etc."
    (interactive)
    (insert "↪"))

  (defun copy-and-comment-region (beg end &optional arg)
    "Copy region as kill and comment-out the copied text.
  See `comment-region' for behavior of a prefix arg."
    (interactive "r\nP")
    (copy-region-as-kill beg end)
    (goto-char end)
    (comment-or-uncomment-region beg end arg))

  (defun sort-words (reverse beg end)
    "From https://www.emacswiki.org/emacs/SortWords
  Sort words in region alphabetically, in REVERSE if negative.
      Prefixed with negative \\[universal-argument], sorts in reverse.

      The variable `sort-fold-case' determines whether alphabetic case
      affects the sort order.

      See `sort-regexp-fields'."
    (interactive "*P\nr")
    (sort-regexp-fields reverse "\\w+" "\\&" beg end))

  ;; External packages
  (use-package drag-stuff
    :ensure t
    :config
    (progn
      (drag-stuff-global-mode t)
      (drag-stuff-define-keys))
    :bind
    (("M-p" . drag-stuff-up)
     ("M-n" . drag-stuff-down)))

  (use-package multiple-cursors
    :ensure t
    :config
    (global-set-key (kbd "C-c m e") 'mc/edit-lines)
    (global-set-key (kbd "C-c m n") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-c m b") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c m a") 'mc/mark-all-like-this)
    (define-key mc/keymap (kbd "<return>") nil))  ;; Allows us to insert new-line with <RET> and still disable multiple-cursor mode with C-g

  ;; Quick keybindings
  (global-set-key (kbd "C-c h r") 'replace-string)
  (global-set-key (kbd "C-c h l") 'my/insert-latex-delims)
  (global-set-key (kbd "C-c h ;") 'copy-and-comment-region)
  (global-set-key (kbd "C-c h v") 'variable-pitch-mode)
  (global-set-key (kbd "C-c h n") 'display-line-numbers-mode)
  (global-set-key (kbd "C-c h a") 'insert-dots-glyph)
  (global-set-key (kbd "C-c h R") 'insert-right-arrow)
  (global-set-key (kbd "C-c h D") 'insert-down-right-arrow)
  ;; gforce mouse specific
  (global-set-key (kbd "<drag-mouse-9>") 'display-line-numbers-mode)  ;; make this something useful and for 8
#+end_src
* Editing and display minor modes
:PROPERTIES:
:ID:       61f6587d-7ab3-4423-b777-eda2ee5f19a1
:END:
- See [[https://protesilaos.com/codelog/2020-07-16-emacs-focused-editing/][Prot "Focused editing"]]
- [[https://two-wrongs.com/centered-cursor-mode-in-vanilla-emacs][Source (blog)]]
#+begin_src elisp
  ;; Modeline
  ;; src: https://bzg.fr/en/emacs-hide-mode-line
  (defvar-local hidden-mode-line-mode nil)
  (define-minor-mode my/hidden-mode-line-mode
    "Minor mode to hide the mode-line in the current buffer."
    :init-value nil
    :global t
    :variable hidden-mode-line-mode
    :group 'editing-basics
    (if hidden-mode-line-mode
        (setq hide-mode-line mode-line-format
              mode-line-format nil)
      (setq mode-line-format hide-mode-line
            hide-mode-line nil))
    (force-mode-line-update)
    ;; Apparently force-mode-line-update is not always enough to
    ;; redisplay the mode-line
    (redraw-display)
    (when (and (called-interactively-p 'interactive)
               hidden-mode-line-mode)
      (run-with-idle-timer
       0 nil 'message
       (concat "My Hidden Mode Line Mode enabled.  "
               "Use M-x my/hidden-mode-line-mode to make the mode-line appear as before."))))

  (define-minor-mode my/scroll-center-cursor-mode
    "Toggle center cursor scrolling behavior"
    :init-value nil
    :lighter " S="
    :global nil
    (if my/scroll-center-cursor-mode
        (setq-local scroll-preserve-screen-position t
                    scroll-conservatively 0
                    maximum-scroll-margin 0.5
                    scroll-margin 99999)
      (setq-local scroll-preserve-screen-position nil
                  scroll-conservatively 100
                  maximum-scroll-margin 0.25
                  scroll-margin 0)))

  (define-minor-mode my/focus-mode
    "Focused reading and editing env"
    :init-value nil
    :global nil
    (if my/focus-mode
        (progn
          (blink-cursor-mode -1)
          (olivetti-mode 1)
          (my/scroll-center-cursor-mode 1)
          (setq mode-line-format nil))
      (progn
        (blink-cursor-mode 1)
        (olivetti-mode -1)
        (my/scroll-center-cursor-mode -1)
        (setq mode-line-format
              '("%e" mode-line-front-space mode-line-mule-info mode-line-client mode-line-modified mode-line-remote mode-line-frame-identification mode-line-buffer-identification "   " mode-line-position (vc-mode vc-mode) "  " ...)))))


  (global-set-key (kbd "C-c h m") 'my/hidden-mode-line-mode)
  (global-set-key (kbd "C-c z") 'my/focus-mode)
#+end_src
* Orgmode
** Base
:PROPERTIES:
:ID:       7290fa14-2dc3-43f1-bea3-66d562b4e250
:END:
#+begin_src elisp
  (use-package org
    :config
    (setq org-startup-indented t
          org-ellipsis " »"
          org-hide-emphasis-markers t
          org-startup-with-inline-images t
          org-image-actual-width 800  ;; adjust as nec.
          org-startup-with-latex-preview nil  ;; SLOW
          org-format-latex-options (plist-put org-format-latex-options :scale 3.5)
          org-pretty-entities nil
          org-startup-folded t
          org-extend-today-until 2
          org-archive-location "~/org/archives/%s_archive::"
          org-id-link-to-org-use-id t
          ;; Refile
          org-refile-targets '((org-agenda-files :todo . "PROJECT"))
          org-refile-use-outline-path 'file
          org-outline-path-complete-in-steps nil
          )
    :bind
    (("C-c l" . org-store-link)
     ("C-c a" . org-agenda)
     ("C-c c" . org-capture)
     ("C-x n t" . org-toggle-narrow-to-subtree))
    :hook
    (org-mode . visual-line-mode)
    (org-mode . variable-pitch-mode)
    (org-mode . olivetti-mode))

  (require 'org-tempo)
  ;; Assign these so that I can toggle variable-pitch-mode and have sensible fixed width still
  ;; https://github.com/daviwil/emacs-from-scratch/blob/c55d0f5e309f7ed8ffa3c00bc35c75937a5184e4/init.el
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

  ;; Prettify leading chars
  (font-lock-add-keywords `org-mode
                          `(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "·"))))))

  ;; Archiving
  (defun my/org-archive-done-tasks-file ()
    (interactive)
    (org-map-entries
     (lambda ()
       (org-archive-subtree)
       (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
     "/DONE" 'file))

  (defun my/org-archive-done-tasks-tree ()
    (interactive)
    (org-map-entries
     (lambda ()
       (org-archive-subtree)
       (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
     "/DONE" 'tree))

  ;; Tags
  (setq org-fast-tag-selection-single-key 'expert
        org-tag-alist
        '(
          (:startgroup . nil)
          ("read" . ?r) ("view" . ?v) ("listen" . ?l)
          (:endgroup . nil)
          (:startgroup . nil)
          ("write" . ?w) ("prog" . ?p) ("note" . ?n)
          (:endgroup . nil)
          ("ak" . ?a)
          ("blog" . ?b)
          ("comp" . ?c)
          ("design" . ?d)
          ("emacs" . ?e)
          ("idea" . ?i)
          ("ff" . ?f)  ;; family & friends
          ("money" .?m)
          ("quick" . ?q)
          ("study" . ?s)
          ))

  ;; Agenda
  (setq org-agenda-span 5
        org-agenda-start-on-weekday nil
        org-agenda-skip-deadline-if-done t
        org-agenda-skip-scheduled-if-done t
        org-agenda-todo-ignore-deadlines nil
        org-agenda-todo-ignore-scheduled nil
        org-deadline-warning-days 3
        org-agenda-window-setup 'current-window
        ;; org-agenda-start-with-log-mode t ;; '(clock)
        )


  (setq org-agenda-custom-commands
        '(
          ;; Tag based views
          ("ta" "AK Tasks"
           ((tags "ak"
                  ((org-agenda-overriding-header "AK Tasks\n")
                   (org-agenda-sorting-strategy '(todo-state-up))
                   ))))
          ("tc" "Computing"
           ((tags "comp"
                  ((org-agenda-overriding-header "Computing Inbox\n")
                   (org-agenda-sorting-strategy '(todo-state-up))
                   ))))
          ("tb" "ajpkim.com"
           ((tags "blog"
                  ((org-agenda-overriding-header "ajpkim.com Inbox\n")
                   (org-agenda-sorting-strategy '(todo-state-up))
                   ))))
          ("te" "Emacs"
           ((tags "emacs"
                  ((org-agenda-overriding-header "Emacs Inbox\n")
                   (org-agenda-sorting-strategy '(todo-state-up))
                   ))))
          ("ti" "Ideas"
           ((tags "idea"
                  ((org-agenda-overriding-header "Ideas\n")
                   (org-agenda-sorting-strategy '(todo-state-up))
                   ))))
          ("tm" "Money"
           ((tags "money"
                  ((org-agenda-overriding-header "Money Matters\n")
                   (org-agenda-sorting-strategy '(todo-state-up))
                   ))))
          ("tp" "Programming"
           ((tags "prog"
                  ((org-agenda-overriding-header "Programming Inbox\n")
                   (org-agenda-sorting-strategy '(todo-state-up))
                   ))))
          ("tr" "Reading"
           ((tags "read"
                  ((org-agenda-overriding-header "Reading\n")
                   (org-agenda-sorting-strategy '(todo-state-up))
                   ))))
          ("ts" "Study"
           ((tags "study"
                  ((org-agenda-overriding-header "Studying\n")
                   (org-agenda-sorting-strategy '(todo-state-up))
                   ))))
          ("tw" "Writing"
           ((tags "write"
                  ((org-agenda-overriding-header "Writing Inbox\n")
                   (org-agenda-sorting-strategy '(todo-state-up))
                   ))))
          ))




  ;; Capture
  (setq org-capture-templates
        '(
          ;; Anki templates
          ("a" "Anki")
          ("aa" "Anki basic"
           entry
           (file+headline org-my-anki-file "New Cards")
           "* %U %^g \n:PROPERTIES:\n:CREATED: %U\n:ANKI_NOTE_TYPE: Basic\n:ANKI_DECK: main\n:ANKI_TAGS:\n:END:\n** Front\n%?\n** Back\n\n")
          ("ac" "Anki cloze"
           entry
           (file+headline org-my-anki-file "New Cards")
           "* %U  %^g \n:PROPERTIES:\n:CREATED: %U\n:ANKI_NOTE_TYPE: Cloze\n:ANKI_DECK: main\n:ANKI_TAGS:\n:END:\n** Text\n%?\n** Extra\n\n")
          ("at" "Anki Type"
           entry
           (file+headline org-my-anki-file "New Cards")
           "* %U  %^g\n:PROPERTIES:\n:CREATED: %U\n:ANKI_NOTE_TYPE: Type\n:ANKI_DECK: main\n:ANKI_TAGS:\n:END:\n** Front\n%?\n** Back\n\n")

          ("b" "Current project buffer task" entry (file+headline buffer-name "Tasks")
           "* TODO %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n"
           :prepend t)
          ("c" "Task" entry (file "~/org/inbox.org")
           "* TODO %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n"
           :prepend t)
          ("d" "Dream journal" plain (file+olp+datetree "~/org/dreams.org")
           "%?"
           :tree-type 'daily)
          ("f" "Current File Link" entry (file "~/org/inbox.org")
           "* TODO %? %a\n:PROPERTIES:\n:CREATED: %U\n:END:\n"
           :prepend t)
          ("l" "Link" entry (file "~/org/links.org")
           "* %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n"
           :prepend t)
          ("x" "Read, Watch, Listen" entry (file+headline "~/org/read-watch-listen.org" "Read, Watch, Listen")
           "* TODO %? %^g\n:PROPERTIES:\n:CREATED: %U\n:END:\n"
           :prepend t)
          ))

  ;; TODO
  (setq org-todo-keywords
        '((sequence "PROJECT(P)" "ACTIVE(a)" "TODO(t)" "LATER(l)" "WAIT(w)" "SOMEDAY(s)" "|" "PASS(p)" "DONE(d)")))

  ;; #ffff66
  ;; #79a8ff
  ;; #f0ffff
  ;; #ffbbff
  ;; #f79a46
  ;; #dfaa8e
  (setq org-todo-keyword-faces
        '(
          ("PROJECT" . (:foreground "#f0ffff" :weight bold))
          ("ACTIVE" . (:foreground "#44ddff" :weight bold))
          ("TODO" . (:foreground "#ffff62" :weight bold))
          ("LATER" . (:foreground "#ffb366" :weight bold))
          ("WAIT" . (:foreground "#ffccbc" :weight bold))
          ("SOMEDAY" . (:foreground "#acfff0" :weight bold))
          ("PASS" . (:foreground "#ff3d40" :weight bold))
          ("DONE" . (:foreground "#19ffaf" :weight bold))))

  (setq org-log-done 'time)
  (setq org-log-into-drawer "LOGBOOK")

  ;; Babel
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (haskell    . t)
     (python     . t)
     (sql        . t)
     (go        . t)
     (latex      . t)
     (js         . t)
     (shell      . t)
     (scheme     . t)))
       #+end_src
** Export and IDs
:PROPERTIES:
:ID:       fbeb5454-6331-41ea-a519-915f8169b6ae
:END:
#+begin_src elisp
  (require 'ox-html)
  (use-package htmlize
    :ensure t
    :config
    (setq org-html-htmlize-output-type 'css))

    ;;; Clean html export
  (setq org-html-head-include-scripts nil
        org-html-head-include-default-style nil
        org-export-headline-levels 10
        org-html-mathjax-template ""
        org-html-postamble nil
        org-export-with-section-numbers nil
        org-export-with-toc nil
        org-export-with-tags nil
        org-html-html5-fancy t
        org-html-doc-type "HTML5"
        )

  ;; https://orgmode.org/manual/Bare-HTML.html#Bare-HTML
  (setq org-html-head ""
        org-html-head-extra ""
        org-html-head-include-default-style nil
        org-html-head-include-scripts nil
        org-html-preamble nil
        org-html-postamble nil
        org-html-use-infojs nil)

  ;; IDs
  (defun my/org-get-headline-based-ids (&rest _)
    "Source: https://alhassy.github.io/AlBasmala.html#Ensuring-Useful-HTML-Anchors
      All non-alphanumeric characters are cleverly replaced with ‘-’.
      If multiple trees end-up with the same id property, issue a
      message and undo any property insertion thus far.
      E.g., ↯ We'll go on a ∀∃⇅ adventure
         ↦  We'll-go-on-a-adventure
      "
    (interactive)
    (let ((ids))
      (org-map-entries
       (lambda ()
         (org-with-point-at (point)
           (let ((id (org-entry-get nil "CUSTOM_ID")))
             (unless id
               (thread-last (nth 4 (org-heading-components))
                 (s-replace-regexp "[^[:alnum:]']" "-")
                 (s-replace-regexp "-+" "-")
                 (s-chop-prefix "-")
                 (s-chop-suffix "-")
                 (setq id))
               (if (not (member id ids))
                   (push id ids)
                 (message-box "Oh no, a repeated id!\n\n\t%s" id)
                 (undo)
                 (setq quit-flag t))
               (org-entry-put nil "CUSTOM_ID" id))))))))


  (defun my/org-uuid-custom-id-get (&optional pom create prefix)
    "Get the CUSTOM_ID property of the entry at point-or-marker POM.
       If POM is nil, refer to the entry at point. If the entry does
       not have an CUSTOM_ID, the function returns nil. However, when
       CREATE is non nil, create a CUSTOM_ID if none is present
       already. PREFIX will be passed through to `org-id-new'. In any
       case, the CUSTOM_ID of the entry is returned."
    (interactive)
    (org-with-point-at pom
      (let ((id (org-entry-get nil "CUSTOM_ID")))
        (cond
         ((and id (stringp id) (string-match "\\S-" id))
          id)
         (create
          ;; (setq id (org-id-new (concat prefix "h")))
          (setq id (org-id-new))
          (org-entry-put pom "CUSTOM_ID" id)
          (org-id-add-location id (buffer-file-name (buffer-base-buffer)))
          id)))))

  (defun my/org-add-uudid-custom-ids-to-headlines-in-file ()
    "Add CUSTOM_ID properties to all headlines in the
       current file which do not already have one."
    (interactive)
    (org-map-entries (lambda () (my/org-uuid-custom-id-get (point) 'create))))
#+end_src
** Packages
:PROPERTIES:
:ID:       ec36048d-f405-44c5-a9c5-a3a43b034aee
:END:
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/org/notes/")
    :bind
    (("C-c n l" . org-roam-buffer-toggle)
     ("C-c n f" . org-roam-node-find)
     ("C-c n i" . org-roam-node-insert))
    :config
    (org-roam-setup))

  (setq org-roam-capture-templates
        '(("d" "default" plain "%?" :if-new
           (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}
  ,#+setupfile: ~/org/assets/org-export/org-html-default.org
  ,#+filetags:")
           :unnarrowed t)))

  (use-package org-journal
    :ensure t
    :defer t
    :init
    (setq org-journal-prefix-key "")  ;; disable default key-bindings: https://github.com/bastibe/org-journal/pull/278#issuecomment-664986601 (allows for user customization entirely)
    :config
    (setq  org-journal-dir "~/org/journal/"
           org-journal-date-format "%Y-%m-%d, %a"
           org-journal-date-prefix "* "
           org-journal-time-prefix "** "
           ;; org-journal-file-header "#+TITLE: %a, %Y-%m-%d\n* Time\n\n#+BEGIN: clocktable :scope agenda-with-archives :maxlevel 2 :block %Y-%m-%d\n#+END:\
           org-journal-file-header "#+TITLE: %Y-%m-%d, %a\n"
           org-journal-file-format "%Y-%m-%d.org"
           org-journal-file-type 'daily
           org-journal-carryover-items ""  ;; Default behavior is to carryover TODOs.
           org-journal-enable-agenda-integration t  ;; Add current and future journal entries to agenda
           )
    :bind (("C-c j" . org-journal-new-entry)
           ("C-c J" . org-journal-open-current-journal-file)
           ("C-c s" . org-journal-search)
           ))

  (defcustom org-journal-find-file 'find-file
    "The function to use when opening an entry.
  Set this to `find-file' if you don't want org-journal to split your window."
    :type 'function)

  (defun org-journal-find-location ()
    ;; Open today's journal, but specify a non-nil prefix argument in order to
    ;; inhibit inserting the heading; org-capture will insert the heading.
    ;; Used for org-capture templates.
    (org-journal-new-entry t)
    (unless (eq org-journal-file-type 'daily)
      (org-narrow-to-subtree))
    (goto-char (point-max)))

  (use-package toc-org
    :ensure t
    :config
    (setq toc-org-max-depth 3
          toc-org-hrefify-default "org"))  ;; Options are org or gh (github)

  (use-package org-bullets
    :ensure t
    :after org
    :hook (org-mode . org-bullets-mode)
    :config
    (setq org-bullets-bullet-list '("✫" "☀" "❂" "❀" "◌" "✶" "✸" "✹" "✺" "◌")))

  ;; ✹
  ;; ✺
  ;; ✻
  ;; ✼
  ;; ✽
  ;; ✾
  ;; ✿
  ;; ❀
  ;; ❁
  ;; ❂
  ;; ❃
  ;; ❅
  ;; ❆
  ;; ❇
  ;; ❈

#+end_src
* Programming helpers
:PROPERTIES:
:ID:       fcb83663-1337-4a09-b67f-32d0969c195e
:END:
#+begin_src elisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)

  ;; Auto-complete
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0
          company-show-numbers t
          company-minimum-prefix-length 2
          company-selection-wrap-around t)
    :init
    (add-hook 'prog-mode-hook 'company-mode))

  ;; Git porcelain
  (use-package magit
    :ensure t)

  ;; Auto-complete backend (Language Server Protocol)
  (use-package lsp-mode
    :ensure t
    :commands (lsp lsp-deferred)
    :bind-keymap
    ("C-c v" . lsp-command-map)
    :custom
    (lsp-keymap-prefix "C-c v")
    :hook
    (lsp-mode . lsp-enable-which-key-integration)
    (csharp-mode . lsp))

  (use-package lsp-ivy
    :ensure t
    :commands lsp-ivy-workspace-symbol)

  (use-package csv-mode
    :ensure t)
#+end_src
* Programming languages
:PROPERTIES:
:ID:       ba0c1d92-34aa-45c0-8a82-b48e15ca1dc9
:END:
#+begin_src emacs-lisp
  ;; Latex
  (defun my/insert-latex-delims (arg)
    (interactive "P")
    (if arg
        (insert "\\[\\]")
      (insert "\\(\\)"))
    (backward-char)
    (backward-char))

  ;; Python
  (use-package anaconda-mode
    :ensure t
    :config
    (add-hook 'python-mode-hook 'anaconda-mode))

  (use-package company-anaconda
    :ensure t
    :init (require 'rx)
    :after (company)
    :config
    (add-to-list 'company-backends 'company-anaconda))

  ;; Jupyter notebooks
  (use-package ein
    :ensure t)

  ;; Go
  (use-package ob-go
    :ensure t)

  (add-hook 'go-mode-hook (lambda () (setq tab-width 4)))


  (require 'lsp-mode)
  (add-hook 'go-mode-hook #'lsp-deferred)

  ;; Set up before-save hooks to format buffer and add/delete imports.
  ;; Make sure you don't have other gofmt/goimports hooks enabled.
  (defun lsp-go-install-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))
  (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

  ;; Scheme
  (require 'xscheme)

  (use-package geiser
    :ensure t)

  (use-package geiser-mit
    :ensure t)

  ;; C#
    ;;;; https://elizadev.medium.com/using-unity-editor-with-emacs-9316eb441411
  ;; (defun my/csharp-mode-hook ()
  ;;   (setq-local lsp-auto-guess-root t)
  ;;   (lsp))

  (setenv "FrameworkPathOverride" "/lib/mono/4.5")  ; https://elizadev.medium.com/using-unity-editor-with-emacs-9316eb441411

  (use-package csharp-mode
    :ensure t
    :mode "\\.cs\\'")
#+end_src
* Search completion framework
:PROPERTIES:
:ID:       f3d03695-07fe-47c8-861a-d76a5d56eaf4
:END:
#+begin_src elisp
  (use-package counsel  ;; Brings in ivy and swiper as dependencies
    :ensure t
    :config
    (setq ivy-use-virtual-buffers t
          ivy-count-format "%d/%d "))

  (ivy-mode 1)
#+end_src
* Security
** gpg
:PROPERTIES:
:ID:       10dfc7f1-5f80-4d68-96e8-abfffbcf76d1
:END:
#+begin_src elisp
  (use-package pinentry
    :ensure t
    :config
    (setf epa-pinentry-mode 'loopback)
    (pinentry-start))

  (use-package pass
    :ensure t
    :config
    (setf epa-pinentry-mode 'loopback))
#+end_src
* RSS
** elfeed
:PROPERTIES:
:ID:       7af47ed9-c4bd-4240-8766-6ae1958f96dd
:END:
#+begin_src elisp
  (use-package elfeed
    :ensure t
    :bind (:map elfeed-search-mode-map
                ("R" . elfeed-mark-all-as-read)
                ("U" . elfeed-mark-all-as-unread)))

  ;; See: https://github.com/heikkil/emacs-literal-config/blob/master/emacs.org#news-feed-reader
  (defun elfeed-mark-all-as-read ()
    "Mark currently shown items read"
    (interactive)
    (mark-whole-buffer)
    (elfeed-search-untag-all-unread))

  (defun elfeed-mark-all-as-unread ()
    "Mark currently shown items unread"
    (interactive)
    (mark-whole-buffer)
    (elfeed-search-tag-all-unread))

  (defun my/elfeed-filter (filter tag)
    "Template for filtering various feed categories.

     FILTER is the filter string to apply, and TAG is a short name of
     the displayed category.

     The cursor is moved to the beginning of the first feed line."
    (setq elfeed-search-filter filter)
    (elfeed-search-update :force)
    (goto-char (point-min))
    (message (concat "elfeed: show " tag)))

  (defun elfeed-read-ccc ()
    (interactive)
    (my/elfeed-filter "@3-month-ago +unread +ccc " "Consciousness, Computation, Cognition"))

  (setq elfeed-feeds
        '(
          ;; AI/ML
          ("http://distill.pub/rss.xml" aiml academic)

          ;; ALife
          ("http://www.reddit.com/r/alife.rss" alife)

          ;; Neuro
          ("htts://academic.oup.com/rss/site_5412/OpenAccess.xml" ccc neuro academic)

          ;; Prog
          ("http://protesilaos.com/codelog.xml" emacs prog)
          ("http://sachachua.com/blog/category/weekly/feed/" emacs prog)

          ;; Philosophy
          ("http://philosophyofbrains.com/feed" ccc phil)

          ;; Science
          ("http://writings.stephenwolfram.com/feed/" science blog)
          ("http://www.scottaaronson.com/blog/?feed=rss2" science blog)

          ;; Sports
          ("http://squared2020.com/rss" sports)
          ))
#+end_src
* SRS
** anki
:PROPERTIES:
:ID:       2ec5ce60-ab56-452c-bb64-9193cee7fe3a
:END:
Sources:
- [[https://yiufung.net/post/anki-org/][blog]]
- [[https://github.com/yiufung/dot-emacs/blob/master/init.el][yiufung init.el]]
#+begin_src elisp
  (use-package anki-editor
    :ensure t
    :bind (:map org-mode-map
                ("<f12>" . anki-editor-cloze-region-dont-incr)
                ("<f11>" . anki-editor-cloze-region-auto-incr)
                ("<f10>" . anki-editor-reset-cloze-number)
                ("<f9>"  . anki-editor-push-tree))
    :hook (org-capture-after-finalize . anki-editor-reset-cloze-number) ; Reset cloze-number after each capture.
    :config (setq anki-editor-create-decks t
                  anki-editor-org-tags-as-anki-tags t
                  anki-editor-ignored-org-tags '("anki")))

  (defun anki-editor-cloze-region-auto-incr (&optional arg)
    "Cloze region without hint and increase card number."
    (interactive)
    (anki-editor-cloze-region my-anki-editor-cloze-number "")
    (setq my-anki-editor-cloze-number (1+ my-anki-editor-cloze-number))
    (forward-sexp))

  (defun anki-editor-cloze-region-dont-incr (&optional arg)
    "Cloze region without hint using the previous card number."
    (interactive)
    (anki-editor-cloze-region (1- my-anki-editor-cloze-number) "")
    (forward-sexp))

  (defun anki-editor-reset-cloze-number (&optional arg)
    "Reset cloze number to ARG or 1"
    (interactive)
    (setq my-anki-editor-cloze-number (or arg 1)))

  (defun anki-editor-push-tree ()
    "Push all notes under a tree."
    (interactive)
    (anki-editor-push-notes '(4))
    (anki-editor-reset-cloze-number))

  ;; Initialize
  (anki-editor-reset-cloze-number)

  ;; Org-capture templates
  (setq org-my-anki-file "~/org/anki.org")
#+end_src
* Email
** mu4e
:PROPERTIES:
:ID:       cd914cce-c422-420c-b803-baab4252a70c
:END:
#+begin_src elisp
  (require 'mu4e)

  (use-package mu4e
    :ensure nil  ;; Installed via pacman
    :config
    (require 'mu4e-org)
    (setq mu4e-change-filenames-when-moving t  ;; important
          mu4e-confirm-quit nil
          mu4e-get-mail-command "mbsync -a"
          update-interval (* 10 60)
          mu4e-maildir "~/Mail"
          send-mail-function 'smtpmail-send-it
          mu4e-compose-format-flowed t
          message-kill-buffer-on-exit t
          mu4e-compose-dont-reply-to-self t
          mu4e-view-show-images t
          )

    (setq mu4e-contexts  ;; We can customize everything for particular email accounts
          (list
           (make-mu4e-context
            :name "protonmail"
            :match-func  ;; Can run arbitrary matching funcs here to filter etc.
            (lambda (msg)
              (when msg
                (string-prefix-p "/protonmail" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "alex@ajpkim.com")
                    (user-full-name . "Alex Kim")
                    (mu4e-drafts-folder . "/protonmail/alexjpkim/Drafts")
                    (mu4e-sent-folder . "/protonmail/alexjpkim/Sent")
                    (mu4e-refile-folder . "/protonmail/alexjpkim/Archive")
                    (mu4e-trash-folder . "/protonmail/alexjpkim/Trash")
                    (mu4e-maildir-shortcuts . ( ("/protonmail/alexjpkim/Inbox" . ?i)
                                                ("/protonmail/alexjpkim/Sent" . ?s)
                                                ("/protonmail/alexjpkim/Trash" . ?t)
                                                ("/protonmail/alexjpkim/All Mail" . ?a)
                                                ("/protonmail/alexjpkim/Drafts" . ?d)
                                                ("/protonmail/alexjpkim/Archive" . ?v)))
                    (smtpmail-smtp-user . "alex@ajpkim.com")
                    (smtpmail-smtp-server . "127.0.0.1")
                    (smtpmail-smtp-service . 1025)
                    (smtpmail-stream-type . starttls)))

           (make-mu4e-context
            :name "gmail"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/gmail" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "alexjpkim@gmail.com")
                    (user-full-name . "Alex Kim Gmail")
                    (mu4e-drafts-folder . "/gmail/alexjpkim/[Gmail]/Drafts")
                    (mu4e-sent-folder . "/gmail/alexjpkim/[Gmail]/Sent Mail")
                    (mu4e-refile-folder . "/gmail/alexjpkim/[Gmail]/All Mail")  ;; Gmail archive == "All Mail"
                    (mu4e-trash-folder . "/gmail/alexjpkim/[Gmail]/Trash")
                    (mu4e-maildir-shortcuts . ( ("/gmail/alexjpkim/Inbox" . ?i)
                                                ("/gmail/alexjpkim/\[Gmail\]/Sent Mail" . ?s)
                                                ("/gmail/alexjpkim/\[Gmail\]/Trash" . ?t)
                                                ("/gmail/alexjpkim/\[Gmail\]/All Mail" . ?a)
                                                ("/gmail/alexjpkim/\[Gmail\]/Drafts" . ?d)))
                    (smtpmail-smtp-user . "alexjpkim@gmail.com")
                    (smtpmail-smtp-server . "smtp.gmail.com")
                    (smtpmail-smtp-service . 465)  ;; 587 for tls  (https://support.google.com/mail/thread/78596123/smtp-servermand-port-number?hl=en)
                    (smtpmail-stream-type . ssl)))))

    (setq mu4e-context-policy 'pick-first
          mu4e-attachment-dir "~/Downloads")
    :bind
    ("C-x m" . mu4e)
    ("C-x M" . mu4e-compose-new))
  ;; Convenient capture in mu4e ("a" brings up quick action menu in mu4e)
  (defun my-capture-mail (msg)
    (interactive)
    (org-capture nil "e"))

  (add-to-list 'mu4e-headers-actions
               '("org capture mail" . my-capture-mail) t)
  (add-to-list 'mu4e-view-actions
               '("org capture email" . my-capture-mail) t)
#+end_src

** org-mime
:PROPERTIES:
:ID:       c06860f3-3e3e-4766-8b38-4a53ba88f6c6
:END:
- For creating HTML formatted mail
- Uses org html export options (can also override)
  - We can write custom CSS (i.e. code block background, etc.)
#+begin_src elisp
  (use-package org-mime
    :ensure t)
#+end_src
* IRC
:PROPERTIES:
:ID:       bc85cda4-1d18-43fc-82a2-27ea968c2317
:END:
#+begin_src emacs-lisp
  (setq erc-server "irc.libera.chat"
        erc-nick "ajpkim"
        erc-user-full-name "Alex Kim"
        erc-kill-buffer-on-part t
        erc-fill-column 100  ;; can always override via Olivetti

        erc-fill-function 'erc-fill-static
        erc-fill-static-center 15

        erc-hide-list '("JOIN" "PART" "QUIT" "MODE" "AWAY")
        ;; erc-track-exclude  ;; turn off notifications for specific channels
        erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE" "AWAY")
        erc-track-visibility nil
        ;; erc-keywords  ;; will highlight keywords in chats
        )

  ;; Uniquely color different nicks in chat
  (use-package erc-hl-nicks
    :ensure t
    :after erc
    :config
    (add-to-list 'erc-modules 'hl-nicks))

  (use-package erc-image
    :ensure t
    :after erc
    :config
    (setq erc-image-inline-rescale 200)
    (add-to-list 'erc-modules 'image))

#+end_src
* Config edit and reload
:PROPERTIES:
:ID:       32aac737-eb26-4279-846d-90596941babf
:END:
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))

  (global-set-key (kbd "C-c e") 'config-visit)
  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src
